Input file: ../../proj2/test.in
   1: int a =;
	INTTYPE   	int
                      Entering <program>
                        Entering <decl>
                          Entering <ntype>
	IDENT     	a
                          Exiting <ntype>
	ASSIGN    	=
                          Entering <decl_tail>
	SEMI      	;
                            Entering <stmts>
                              Entering <term>
                                Entering <pre>
                                Exiting <pre>
                                Entering <var>
Error at 1,8: Identifier or numeric literal expected; ; found
                                Exiting <var>
                                Entering <post>
                                Exiting <post>
                              Exiting <term>
                              Entering <stmt_tail>
                              Exiting <stmt_tail>
                            Exiting <stmts>
                          Exiting <decl_tail>
                        Exiting <decl>
   2: double b = 5.5.5;
	DBLTYPE   	double
                        Entering <more_stmts>
                          Entering <decl>
                            Entering <ntype>
	IDENT     	b
                            Exiting <ntype>
	ASSIGN    	=
                            Entering <decl_tail>
	NUMLIT    	5.5
                              Entering <stmts>
                                Entering <term>
                                  Entering <pre>
                                  Exiting <pre>
                                  Entering <var>
	NUMLIT    	.5
                                  Exiting <var>
                                  Entering <post>
                                  Exiting <post>
                                Exiting <term>
                                Entering <stmt_tail>
                                  Entering <binop>
Error at 2,16: Binary operator expected; .5 found
	SEMI      	;
                                  Exiting <binop>
                                  Entering <stmts>
                                    Entering <term>
                                      Entering <pre>
                                      Exiting <pre>
                                      Entering <var>
Error at 2,17: Identifier or numeric literal expected; ; found
                                      Exiting <var>
                                      Entering <post>
                                      Exiting <post>
                                    Exiting <term>
                                    Entering <stmt_tail>
                                    Exiting <stmt_tail>
                                  Exiting <stmts>
                                Exiting <stmt_tail>
                              Exiting <stmts>
                            Exiting <decl_tail>
                          Exiting <decl>
   3: int c = a / b + 2.1;
	INTTYPE   	int
                          Entering <more_stmts>
                            Entering <decl>
                              Entering <ntype>
	IDENT     	c
                              Exiting <ntype>
	ASSIGN    	=
                              Entering <decl_tail>
	IDENT     	a
                                Entering <stmts>
                                  Entering <term>
                                    Entering <pre>
                                    Exiting <pre>
                                    Entering <var>
	DIV       	/
                                    Exiting <var>
                                    Entering <post>
                                    Exiting <post>
                                  Exiting <term>
                                  Entering <stmt_tail>
                                    Entering <binop>
	IDENT     	b
                                    Exiting <binop>
                                    Entering <stmts>
                                      Entering <term>
                                        Entering <pre>
                                        Exiting <pre>
                                        Entering <var>
	PLUS      	+
                                        Exiting <var>
                                        Entering <post>
                                        Exiting <post>
                                      Exiting <term>
                                      Entering <stmt_tail>
                                        Entering <binop>
	NUMLIT    	2.1
                                        Exiting <binop>
                                        Entering <stmts>
                                          Entering <term>
                                            Entering <pre>
                                            Exiting <pre>
                                            Entering <var>
	SEMI      	;
                                            Exiting <var>
                                            Entering <post>
                                            Exiting <post>
                                          Exiting <term>
                                          Entering <stmt_tail>
                                          Exiting <stmt_tail>
                                        Exiting <stmts>
                                      Exiting <stmt_tail>
                                    Exiting <stmts>
                                  Exiting <stmt_tail>
                                Exiting <stmts>
                              Exiting <decl_tail>
                            Exiting <decl>
   4: double d = c - a * +b;
	DBLTYPE   	double
                            Entering <more_stmts>
                              Entering <decl>
                                Entering <ntype>
	IDENT     	d
                                Exiting <ntype>
	ASSIGN    	=
                                Entering <decl_tail>
	IDENT     	c
                                  Entering <stmts>
                                    Entering <term>
                                      Entering <pre>
                                      Exiting <pre>
                                      Entering <var>
	MINUS     	-
                                      Exiting <var>
                                      Entering <post>
                                      Exiting <post>
                                    Exiting <term>
                                    Entering <stmt_tail>
                                      Entering <binop>
	IDENT     	a
                                      Exiting <binop>
                                      Entering <stmts>
                                        Entering <term>
                                          Entering <pre>
                                          Exiting <pre>
                                          Entering <var>
	MULT      	*
                                          Exiting <var>
                                          Entering <post>
                                          Exiting <post>
                                        Exiting <term>
                                        Entering <stmt_tail>
                                          Entering <binop>
	PLUS      	+
                                          Exiting <binop>
                                          Entering <stmts>
                                            Entering <term>
                                              Entering <pre>
                                                Entering <uoppre>
	IDENT     	b
                                                Exiting <uoppre>
                                                Entering <pre>
                                                Exiting <pre>
                                              Exiting <pre>
                                              Entering <var>
	SEMI      	;
                                              Exiting <var>
                                              Entering <post>
                                              Exiting <post>
                                            Exiting <term>
                                            Entering <stmt_tail>
                                            Exiting <stmt_tail>
                                          Exiting <stmts>
                                        Exiting <stmt_tail>
                                      Exiting <stmts>
                                    Exiting <stmt_tail>
                                  Exiting <stmts>
                                Exiting <decl_tail>
                              Exiting <decl>
   5: int e = -a % c & ++c;
	INTTYPE   	int
                              Entering <more_stmts>
                                Entering <decl>
                                  Entering <ntype>
	IDENT     	e
                                  Exiting <ntype>
	ASSIGN    	=
                                  Entering <decl_tail>
	MINUS     	-
                                    Entering <stmts>
                                      Entering <term>
                                        Entering <pre>
                                          Entering <uoppre>
	IDENT     	a
                                          Exiting <uoppre>
                                          Entering <pre>
                                          Exiting <pre>
                                        Exiting <pre>
                                        Entering <var>
	MOD       	%
                                        Exiting <var>
                                        Entering <post>
                                        Exiting <post>
                                      Exiting <term>
                                      Entering <stmt_tail>
                                        Entering <binop>
	IDENT     	c
                                        Exiting <binop>
                                        Entering <stmts>
                                          Entering <term>
                                            Entering <pre>
                                            Exiting <pre>
                                            Entering <var>
	AND       	&
                                            Exiting <var>
                                            Entering <post>
                                            Exiting <post>
                                          Exiting <term>
                                          Entering <stmt_tail>
                                            Entering <binop>
	PLUSPLUS  	++
                                            Exiting <binop>
                                            Entering <stmts>
                                              Entering <term>
                                                Entering <pre>
                                                  Entering <uoppre>
	IDENT     	c
                                                  Exiting <uoppre>
                                                  Entering <pre>
                                                  Exiting <pre>
                                                Exiting <pre>
                                                Entering <var>
	SEMI      	;
                                                Exiting <var>
                                                Entering <post>
                                                Exiting <post>
                                              Exiting <term>
                                              Entering <stmt_tail>
                                              Exiting <stmt_tail>
                                            Exiting <stmts>
                                          Exiting <stmt_tail>
                                        Exiting <stmts>
                                      Exiting <stmt_tail>
                                    Exiting <stmts>
                                  Exiting <decl_tail>
                                Exiting <decl>
   6: int f = e |^ a--;
	INTTYPE   	int
                                Entering <more_stmts>
                                  Entering <decl>
                                    Entering <ntype>
	IDENT     	f
                                    Exiting <ntype>
	ASSIGN    	=
                                    Entering <decl_tail>
	IDENT     	e
                                      Entering <stmts>
                                        Entering <term>
                                          Entering <pre>
                                          Exiting <pre>
                                          Entering <var>
	OR        	|
                                          Exiting <var>
                                          Entering <post>
                                          Exiting <post>
                                        Exiting <term>
                                        Entering <stmt_tail>
                                          Entering <binop>
	XOR       	^
                                          Exiting <binop>
                                          Entering <stmts>
                                            Entering <term>
                                              Entering <pre>
                                              Exiting <pre>
                                              Entering <var>
Error at 6,12: Identifier or numeric literal expected; ^ found
	IDENT     	a
	MINUSMINUS	--
	SEMI      	;
                                              Exiting <var>
                                              Entering <post>
                                              Exiting <post>
                                            Exiting <term>
                                            Entering <stmt_tail>
                                            Exiting <stmt_tail>
                                          Exiting <stmts>
                                        Exiting <stmt_tail>
                                      Exiting <stmts>
                                    Exiting <decl_tail>
                                  Exiting <decl>
   7: int g = c << 2 + (a += 1;
	INTTYPE   	int
                                  Entering <more_stmts>
                                    Entering <decl>
                                      Entering <ntype>
	IDENT     	g
                                      Exiting <ntype>
	ASSIGN    	=
                                      Entering <decl_tail>
	IDENT     	c
                                        Entering <stmts>
                                          Entering <term>
                                            Entering <pre>
                                            Exiting <pre>
                                            Entering <var>
	SHIFTL    	<<
                                            Exiting <var>
                                            Entering <post>
                                            Exiting <post>
                                          Exiting <term>
                                          Entering <stmt_tail>
                                            Entering <binop>
	NUMLIT    	2
                                            Exiting <binop>
                                            Entering <stmts>
                                              Entering <term>
                                                Entering <pre>
                                                Exiting <pre>
                                                Entering <var>
	PLUS      	+
                                                Exiting <var>
                                                Entering <post>
                                                Exiting <post>
                                              Exiting <term>
                                              Entering <stmt_tail>
                                                Entering <binop>
	LPAREN    	(
                                                Exiting <binop>
                                                Entering <stmts>
                                                  Entering <term>
	IDENT     	a
                                                    Entering <stmts>
                                                      Entering <term>
                                                        Entering <pre>
                                                        Exiting <pre>
                                                        Entering <var>
	PLUSEQ    	+=
                                                        Exiting <var>
                                                        Entering <post>
                                                        Exiting <post>
                                                      Exiting <term>
                                                      Entering <stmt_tail>
                                                        Entering <binop>
	NUMLIT    	1
                                                        Exiting <binop>
                                                        Entering <stmts>
                                                          Entering <term>
                                                            Entering <pre>
                                                            Exiting <pre>
                                                            Entering <var>
	SEMI      	;
                                                            Exiting <var>
                                                            Entering <post>
                                                            Exiting <post>
                                                          Exiting <term>
                                                          Entering <stmt_tail>
                                                          Exiting <stmt_tail>
                                                        Exiting <stmts>
                                                      Exiting <stmt_tail>
                                                    Exiting <stmts>
Error at 7,25: ) expected; ; found
                                                  Exiting <term>
                                                  Entering <stmt_tail>
                                                  Exiting <stmt_tail>
                                                Exiting <stmts>
                                              Exiting <stmt_tail>
                                            Exiting <stmts>
                                          Exiting <stmt_tail>
                                        Exiting <stmts>
                                      Exiting <decl_tail>
                                    Exiting <decl>
   8: int h = c >> 2 . (-= 1);
	INTTYPE   	int
                                    Entering <more_stmts>
                                      Entering <decl>
                                        Entering <ntype>
	IDENT     	h
                                        Exiting <ntype>
	ASSIGN    	=
                                        Entering <decl_tail>
	IDENT     	c
                                          Entering <stmts>
                                            Entering <term>
                                              Entering <pre>
                                              Exiting <pre>
                                              Entering <var>
	SHIFTR    	>>
                                              Exiting <var>
                                              Entering <post>
                                              Exiting <post>
                                            Exiting <term>
                                            Entering <stmt_tail>
                                              Entering <binop>
	NUMLIT    	2
                                              Exiting <binop>
                                              Entering <stmts>
                                                Entering <term>
                                                  Entering <pre>
                                                  Exiting <pre>
                                                  Entering <var>
Error at 8,16: Invalid character found: .
	ERROR     	.
                                                  Exiting <var>
                                                  Entering <post>
                                                  Exiting <post>
                                                Exiting <term>
                                                Entering <stmt_tail>
                                                  Entering <binop>
Error at 8,16: Binary operator expected; . found
	LPAREN    	(
	MINUSEQ   	-=
	NUMLIT    	1
	RPAREN    	)
	SEMI      	;
                                                  Exiting <binop>
                                                  Entering <stmts>
                                                    Entering <term>
                                                      Entering <pre>
                                                      Exiting <pre>
                                                      Entering <var>
Error at 8,24: Identifier or numeric literal expected; ; found
                                                      Exiting <var>
                                                      Entering <post>
                                                      Exiting <post>
                                                    Exiting <term>
                                                    Entering <stmt_tail>
                                                    Exiting <stmt_tail>
                                                  Exiting <stmts>
                                                Exiting <stmt_tail>
                                              Exiting <stmts>
                                            Exiting <stmt_tail>
                                          Exiting <stmts>
                                        Exiting <decl_tail>
                                      Exiting <decl>
   9: int i = e < f = g > h;
	INTTYPE   	int
                                      Entering <more_stmts>
                                        Entering <decl>
                                          Entering <ntype>
	IDENT     	i
                                          Exiting <ntype>
	ASSIGN    	=
                                          Entering <decl_tail>
	IDENT     	e
                                            Entering <stmts>
                                              Entering <term>
                                                Entering <pre>
                                                Exiting <pre>
                                                Entering <var>
	LT        	<
                                                Exiting <var>
                                                Entering <post>
                                                Exiting <post>
                                              Exiting <term>
                                              Entering <stmt_tail>
                                                Entering <binop>
	IDENT     	f
                                                Exiting <binop>
                                                Entering <stmts>
                                                  Entering <term>
                                                    Entering <pre>
                                                    Exiting <pre>
                                                    Entering <var>
	ASSIGN    	=
                                                    Exiting <var>
                                                    Entering <post>
                                                    Exiting <post>
                                                  Exiting <term>
                                                  Entering <stmt_tail>
                                                    Entering <binop>
	IDENT     	g
                                                    Exiting <binop>
                                                    Entering <stmts>
                                                      Entering <term>
                                                        Entering <pre>
                                                        Exiting <pre>
                                                        Entering <var>
	GT        	>
                                                        Exiting <var>
                                                        Entering <post>
                                                        Exiting <post>
                                                      Exiting <term>
                                                      Entering <stmt_tail>
                                                        Entering <binop>
	IDENT     	h
                                                        Exiting <binop>
                                                        Entering <stmts>
                                                          Entering <term>
                                                            Entering <pre>
                                                            Exiting <pre>
                                                            Entering <var>
	SEMI      	;
                                                            Exiting <var>
                                                            Entering <post>
                                                            Exiting <post>
                                                          Exiting <term>
                                                          Entering <stmt_tail>
                                                          Exiting <stmt_tail>
                                                        Exiting <stmts>
                                                      Exiting <stmt_tail>
                                                    Exiting <stmts>
                                                  Exiting <stmt_tail>
                                                Exiting <stmts>
                                              Exiting <stmt_tail>
                                            Exiting <stmts>
                                          Exiting <decl_tail>
                                        Exiting <decl>
  10: int j = ++a $ c+ + --e + f--;
	INTTYPE   	int
                                        Entering <more_stmts>
                                          Entering <decl>
                                            Entering <ntype>
	IDENT     	j
                                            Exiting <ntype>
	ASSIGN    	=
                                            Entering <decl_tail>
	PLUSPLUS  	++
                                              Entering <stmts>
                                                Entering <term>
                                                  Entering <pre>
                                                    Entering <uoppre>
	IDENT     	a
                                                    Exiting <uoppre>
                                                    Entering <pre>
                                                    Exiting <pre>
                                                  Exiting <pre>
                                                  Entering <var>
Error at 10,13: Invalid character found: $
	ERROR     	$
                                                  Exiting <var>
                                                  Entering <post>
                                                  Exiting <post>
                                                Exiting <term>
                                                Entering <stmt_tail>
                                                  Entering <binop>
Error at 10,13: Binary operator expected; $ found
	IDENT     	c
	PLUS      	+
	PLUS      	+
	MINUSMINUS	--
	IDENT     	e
	PLUS      	+
	IDENT     	f
	MINUSMINUS	--
	SEMI      	;
                                                  Exiting <binop>
                                                  Entering <stmts>
                                                    Entering <term>
                                                      Entering <pre>
                                                      Exiting <pre>
                                                      Entering <var>
Error at 10,29: Identifier or numeric literal expected; ; found
                                                      Exiting <var>
                                                      Entering <post>
                                                      Exiting <post>
                                                    Exiting <term>
                                                    Entering <stmt_tail>
                                                    Exiting <stmt_tail>
                                                  Exiting <stmts>
                                                Exiting <stmt_tail>
                                              Exiting <stmts>
                                            Exiting <decl_tail>
                                          Exiting <decl>
  11: int k = a <= c && e >= f || !(g + (h - j) * k);
	INTTYPE   	int
                                          Entering <more_stmts>
                                            Entering <decl>
                                              Entering <ntype>
	IDENT     	k
                                              Exiting <ntype>
	ASSIGN    	=
                                              Entering <decl_tail>
	IDENT     	a
                                                Entering <stmts>
                                                  Entering <term>
                                                    Entering <pre>
                                                    Exiting <pre>
                                                    Entering <var>
	LTE       	<=
                                                    Exiting <var>
                                                    Entering <post>
                                                    Exiting <post>
                                                  Exiting <term>
                                                  Entering <stmt_tail>
                                                    Entering <binop>
	IDENT     	c
                                                    Exiting <binop>
                                                    Entering <stmts>
                                                      Entering <term>
                                                        Entering <pre>
                                                        Exiting <pre>
                                                        Entering <var>
	LOGAND    	&&
                                                        Exiting <var>
                                                        Entering <post>
                                                        Exiting <post>
                                                      Exiting <term>
                                                      Entering <stmt_tail>
                                                        Entering <binop>
	IDENT     	e
                                                        Exiting <binop>
                                                        Entering <stmts>
                                                          Entering <term>
                                                            Entering <pre>
                                                            Exiting <pre>
                                                            Entering <var>
	GTE       	>=
                                                            Exiting <var>
                                                            Entering <post>
                                                            Exiting <post>
                                                          Exiting <term>
                                                          Entering <stmt_tail>
                                                            Entering <binop>
	IDENT     	f
                                                            Exiting <binop>
                                                            Entering <stmts>
                                                              Entering <term>
                                                                Entering <pre>
                                                                Exiting <pre>
                                                                Entering <var>
	LOGOR     	||
                                                                Exiting <var>
                                                                Entering <post>
                                                                Exiting <post>
                                                              Exiting <term>
                                                              Entering <stmt_tail>
                                                                Entering <binop>
	NOT       	!
                                                                Exiting <binop>
                                                                Entering <stmts>
                                                                  Entering <term>
                                                                    Entering <pre>
                                                                      Entering <uoppre>
	LPAREN    	(
                                                                      Exiting <uoppre>
                                                                      Entering <pre>
                                                                      Exiting <pre>
                                                                    Exiting <pre>
                                                                    Entering <var>
Error at 11,30: Identifier or numeric literal expected; ( found
	IDENT     	g
	PLUS      	+
	LPAREN    	(
	IDENT     	h
	MINUS     	-
	IDENT     	j
	RPAREN    	)
	MULT      	*
	IDENT     	k
	RPAREN    	)
	SEMI      	;
                                                                    Exiting <var>
                                                                    Entering <post>
                                                                    Exiting <post>
                                                                  Exiting <term>
                                                                  Entering <stmt_tail>
                                                                  Exiting <stmt_tail>
                                                                Exiting <stmts>
                                                              Exiting <stmt_tail>
                                                            Exiting <stmts>
                                                          Exiting <stmt_tail>
                                                        Exiting <stmts>
                                                      Exiting <stmt_tail>
                                                    Exiting <stmts>
                                                  Exiting <stmt_tail>
                                                Exiting <stmts>
                                              Exiting <decl_tail>
                                            Exiting <decl>
  12: int l = a~;
	INTTYPE   	int
                                            Entering <more_stmts>
                                              Entering <decl>
                                                Entering <ntype>
	IDENT     	l
                                                Exiting <ntype>
	ASSIGN    	=
                                                Entering <decl_tail>
	IDENT     	a
                                                  Entering <stmts>
                                                    Entering <term>
                                                      Entering <pre>
                                                      Exiting <pre>
                                                      Entering <var>
	TILDA     	~
                                                      Exiting <var>
                                                      Entering <post>
                                                      Exiting <post>
                                                    Exiting <term>
                                                    Entering <stmt_tail>
                                                      Entering <binop>
Error at 12,10: Binary operator expected; ~ found
	SEMI      	;
                                                      Exiting <binop>
                                                      Entering <stmts>
                                                        Entering <term>
                                                          Entering <pre>
                                                          Exiting <pre>
                                                          Entering <var>
Error at 12,11: Identifier or numeric literal expected; ; found
                                                          Exiting <var>
                                                          Entering <post>
                                                          Exiting <post>
                                                        Exiting <term>
                                                        Entering <stmt_tail>
                                                        Exiting <stmt_tail>
                                                      Exiting <stmts>
                                                    Exiting <stmt_tail>
                                                  Exiting <stmts>
                                                Exiting <decl_tail>
                                              Exiting <decl>
  13: int m = (a =* 2) != (c /= 2);
	INTTYPE   	int
                                              Entering <more_stmts>
                                                Entering <decl>
                                                  Entering <ntype>
	IDENT     	m
                                                  Exiting <ntype>
	ASSIGN    	=
                                                  Entering <decl_tail>
	LPAREN    	(
                                                    Entering <stmts>
                                                      Entering <term>
	IDENT     	a
                                                        Entering <stmts>
                                                          Entering <term>
                                                            Entering <pre>
                                                            Exiting <pre>
                                                            Entering <var>
	ASSIGN    	=
                                                            Exiting <var>
                                                            Entering <post>
                                                            Exiting <post>
                                                          Exiting <term>
                                                          Entering <stmt_tail>
                                                            Entering <binop>
	MULT      	*
                                                            Exiting <binop>
                                                            Entering <stmts>
                                                              Entering <term>
                                                                Entering <pre>
                                                                Exiting <pre>
                                                                Entering <var>
Error at 13,13: Identifier or numeric literal expected; * found
	NUMLIT    	2
	RPAREN    	)
	NOTEQ     	!=
	LPAREN    	(
	IDENT     	c
	DIVEQ     	/=
	NUMLIT    	2
	RPAREN    	)
	SEMI      	;
                                                                Exiting <var>
                                                                Entering <post>
                                                                Exiting <post>
                                                              Exiting <term>
                                                              Entering <stmt_tail>
                                                              Exiting <stmt_tail>
                                                            Exiting <stmts>
                                                          Exiting <stmt_tail>
                                                        Exiting <stmts>
Error at 13,29: ) expected; ; found
                                                      Exiting <term>
                                                      Entering <stmt_tail>
                                                      Exiting <stmt_tail>
                                                    Exiting <stmts>
                                                  Exiting <decl_tail>
                                                Exiting <decl>
  14: h %= 5;
	IDENT     	h
                                                Entering <more_stmts>
                                                  Entering <stmts>
                                                    Entering <term>
                                                      Entering <pre>
                                                      Exiting <pre>
                                                      Entering <var>
	MODEQ     	%=
                                                      Exiting <var>
                                                      Entering <post>
                                                      Exiting <post>
                                                    Exiting <term>
                                                    Entering <stmt_tail>
                                                      Entering <binop>
	NUMLIT    	5
                                                      Exiting <binop>
                                                      Entering <stmts>
                                                        Entering <term>
                                                          Entering <pre>
                                                          Exiting <pre>
                                                          Entering <var>
	SEMI      	;
                                                          Exiting <var>
                                                          Entering <post>
                                                          Exiting <post>
                                                        Exiting <term>
                                                        Entering <stmt_tail>
                                                        Exiting <stmt_tail>
                                                      Exiting <stmts>
                                                    Exiting <stmt_tail>
                                                  Exiting <stmts>
  15: i =& 255;
	IDENT     	i
                                                  Entering <more_stmts>
                                                    Entering <stmts>
                                                      Entering <term>
                                                        Entering <pre>
                                                        Exiting <pre>
                                                        Entering <var>
	ASSIGN    	=
                                                        Exiting <var>
                                                        Entering <post>
                                                        Exiting <post>
                                                      Exiting <term>
                                                      Entering <stmt_tail>
                                                        Entering <binop>
	AND       	&
                                                        Exiting <binop>
                                                        Entering <stmts>
                                                          Entering <term>
                                                            Entering <pre>
                                                            Exiting <pre>
                                                            Entering <var>
Error at 15,4: Identifier or numeric literal expected; & found
	NUMLIT    	255
	SEMI      	;
                                                            Exiting <var>
                                                            Entering <post>
                                                            Exiting <post>
                                                          Exiting <term>
                                                          Entering <stmt_tail>
                                                          Exiting <stmt_tail>
                                                        Exiting <stmts>
                                                      Exiting <stmt_tail>
                                                    Exiting <stmts>
  16: j |= 5;
	IDENT     	j
                                                    Entering <more_stmts>
                                                      Entering <stmts>
                                                        Entering <term>
                                                          Entering <pre>
                                                          Exiting <pre>
                                                          Entering <var>
	OREQ      	|=
                                                          Exiting <var>
                                                          Entering <post>
                                                          Exiting <post>
                                                        Exiting <term>
                                                        Entering <stmt_tail>
                                                          Entering <binop>
	NUMLIT    	5
                                                          Exiting <binop>
                                                          Entering <stmts>
                                                            Entering <term>
                                                              Entering <pre>
                                                              Exiting <pre>
                                                              Entering <var>
	SEMI      	;
                                                              Exiting <var>
                                                              Entering <post>
                                                              Exiting <post>
                                                            Exiting <term>
                                                            Entering <stmt_tail>
                                                            Exiting <stmt_tail>
                                                          Exiting <stmts>
                                                        Exiting <stmt_tail>
                                                      Exiting <stmts>
  17: k ^= 127;
	IDENT     	k
                                                      Entering <more_stmts>
                                                        Entering <stmts>
                                                          Entering <term>
                                                            Entering <pre>
                                                            Exiting <pre>
                                                            Entering <var>
	XOREQ     	^=
                                                            Exiting <var>
                                                            Entering <post>
                                                            Exiting <post>
                                                          Exiting <term>
                                                          Entering <stmt_tail>
                                                            Entering <binop>
	NUMLIT    	127
                                                            Exiting <binop>
                                                            Entering <stmts>
                                                              Entering <term>
                                                                Entering <pre>
                                                                Exiting <pre>
                                                                Entering <var>
	SEMI      	;
                                                                Exiting <var>
                                                                Entering <post>
                                                                Exiting <post>
                                                              Exiting <term>
                                                              Entering <stmt_tail>
                                                              Exiting <stmt_tail>
                                                            Exiting <stmts>
                                                          Exiting <stmt_tail>
                                                        Exiting <stmts>
  18: l <=< 2;
	IDENT     	l
                                                        Entering <more_stmts>
                                                          Entering <stmts>
                                                            Entering <term>
                                                              Entering <pre>
                                                              Exiting <pre>
                                                              Entering <var>
	LTE       	<=
                                                              Exiting <var>
                                                              Entering <post>
                                                              Exiting <post>
                                                            Exiting <term>
                                                            Entering <stmt_tail>
                                                              Entering <binop>
	LT        	<
                                                              Exiting <binop>
                                                              Entering <stmts>
                                                                Entering <term>
                                                                  Entering <pre>
                                                                  Exiting <pre>
                                                                  Entering <var>
Error at 18,5: Identifier or numeric literal expected; < found
	NUMLIT    	2
	SEMI      	;
                                                                  Exiting <var>
                                                                  Entering <post>
                                                                  Exiting <post>
                                                                Exiting <term>
                                                                Entering <stmt_tail>
                                                                Exiting <stmt_tail>
                                                              Exiting <stmts>
                                                            Exiting <stmt_tail>
                                                          Exiting <stmts>
  19: m >= 3;
	IDENT     	m
                                                          Entering <more_stmts>
                                                            Entering <stmts>
                                                              Entering <term>
                                                                Entering <pre>
                                                                Exiting <pre>
                                                                Entering <var>
	GTE       	>=
                                                                Exiting <var>
                                                                Entering <post>
                                                                Exiting <post>
                                                              Exiting <term>
                                                              Entering <stmt_tail>
                                                                Entering <binop>
	NUMLIT    	3
                                                                Exiting <binop>
                                                                Entering <stmts>
                                                                  Entering <term>
                                                                    Entering <pre>
                                                                    Exiting <pre>
                                                                    Entering <var>
	SEMI      	;
                                                                    Exiting <var>
                                                                    Entering <post>
                                                                    Exiting <post>
                                                                  Exiting <term>
                                                                  Entering <stmt_tail>
                                                                  Exiting <stmt_tail>
                                                                Exiting <stmts>
                                                              Exiting <stmt_tail>
                                                            Exiting <stmts>
	EOFT      	eof
                                                            Entering <more_stmts>
                                                            Exiting <more_stmts>
                                                          Exiting <more_stmts>
                                                        Exiting <more_stmts>
                                                      Exiting <more_stmts>
                                                    Exiting <more_stmts>
                                                  Exiting <more_stmts>
                                                Exiting <more_stmts>
                                              Exiting <more_stmts>
                                            Exiting <more_stmts>
                                          Exiting <more_stmts>
                                        Exiting <more_stmts>
                                      Exiting <more_stmts>
                                    Exiting <more_stmts>
                                  Exiting <more_stmts>
                                Exiting <more_stmts>
                              Exiting <more_stmts>
                            Exiting <more_stmts>
                          Exiting <more_stmts>
                        Exiting <more_stmts>
                      Exiting <program>
18 errors found in input file
